import { ExpoConfig } from '@expo/config';
import { DirectPackageInstallCheck } from './checks/DirectPackageInstallCheck';
import { ExpoConfigCommonIssueCheck } from './checks/ExpoConfigCommonIssueCheck';
import { ExpoConfigSchemaCheck } from './checks/ExpoConfigSchemaCheck';
import { GlobalPackageInstalledLocallyCheck } from './checks/GlobalPackageInstalledLocallyCheck';
import { IllegalPackageCheck } from './checks/IllegalPackageCheck';
import { MetroConfigCheck } from './checks/MetroConfigCheck';
import { NativeToolingVersionCheck } from './checks/NativeToolingVersionCheck';
import { PackageJsonCheck } from './checks/PackageJsonCheck';
import { PackageManagerVersionCheck } from './checks/PackageManagerVersionCheck';
import { ProjectSetupCheck } from './checks/ProjectSetupCheck';
import { SupportPackageVersionCheck } from './checks/SupportPackageVersionCheck';
import { DoctorCheck, DoctorCheckParams, DoctorCheckResult } from './checks/checks.types';
type CheckError = Error & {
    code?: string;
};
interface DoctorCheckRunnerJob {
    check: DoctorCheck;
    result: DoctorCheckResult;
    duration: number;
    error?: CheckError;
}
export declare function printCheckResultSummaryOnComplete(job: DoctorCheckRunnerJob): Promise<void>;
export declare function printFailedCheckIssueAndAdvice(job: DoctorCheckRunnerJob): Promise<void>;
/**
 * Run all commands in parallel. Make a callback as each one finishes.
 * @param checks list of checks to run (do any filtering beforehand)
 * @param checkParams parameters to be passed to each check
 * @param onCheckComplete callback to be called when each check finishes
 * @returns check with its associated results or exception if it failed unexpectedly
 */
export declare function runChecksAsync(checks: DoctorCheck[], checkParams: DoctorCheckParams, onCheckComplete: (checkRunnerJob: DoctorCheckRunnerJob) => void): Promise<DoctorCheckRunnerJob[]>;
export declare function getChecksInScopeForProject(exp: ExpoConfig): (PackageManagerVersionCheck | IllegalPackageCheck | GlobalPackageInstalledLocallyCheck | SupportPackageVersionCheck | ExpoConfigSchemaCheck | ExpoConfigCommonIssueCheck | DirectPackageInstallCheck | PackageJsonCheck | ProjectSetupCheck | MetroConfigCheck | NativeToolingVersionCheck)[];
export declare function actionAsync(projectRoot: string): Promise<void>;
export {};
